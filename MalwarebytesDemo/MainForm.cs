using System;
using System.ComponentModel;
using System.IO;
using System.Windows.Forms;

namespace MalwarebytesDemo
{
    public partial class MainForm : Form
    {
        #region Globals

        private int _processedFileCount = 0;
        private int _problematicFileCount = 0;

        #endregion

        #region UI code

        public MainForm()
        {
            InitializeComponent();
        }

        private void buttonStart_Click(object sender, EventArgs e)
        {
            textBoxOutput.Clear();
            labelLastScanCompletionTime.Text = String.Empty;
            labelProcessedFileCount.Text = String.Empty;
            labelNextStep.Text = String.Empty;
            _processedFileCount = 0;
            _problematicFileCount = 0;

            var scanPath = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
            backgroundWorker.RunWorkerAsync(scanPath);

            buttonStart.Enabled = false;
            buttonStop.Enabled = true;
        }

        private void buttonStop_Click(object sender, EventArgs e)
        {
            if (backgroundWorker.IsBusy)
            {
                backgroundWorker.CancelAsync();
            }

            buttonStart.Enabled = true;
            buttonStop.Enabled = false;
        }

        #endregion

        #region Background worker code

        private void backgroundWorker_DoWork(object sender, DoWorkEventArgs eventArgs)
        {
            var startingDirectory = eventArgs.Argument as string;
            if (startingDirectory != null)
            {
                ScanDirectory(startingDirectory, ref eventArgs);
            }
        }

        private void backgroundWorker_ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            // Could use this to update a progress bar if you know a priori how much you're processing.
            //var percentage = (int)((e.ProgressPercentage * 100.0) / progressBar.Maximum);
            //progressBar.Value = e.ProgressPercentage;
            //labelStatus.Text = "Processing " + percentage.ToString() + "%";
        }

        private void backgroundWorker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            var completionMessage = String.Empty;
            if (e.Cancelled)
            {
                completionMessage = "Scan cancelled";
            }
            else if (e.Error != null)
            {
                completionMessage = $"Error while performing scan: '{e.Error}'";
            }
            else
            {
                completionMessage = $"Scanned {_processedFileCount} files successfully";
                if (_problematicFileCount > 0)
                {
                    var pluralEnding = _problematicFileCount > 1 ? "s" : String.Empty;
                    completionMessage += $" (WARNING: found {_problematicFileCount} problematic file{pluralEnding})";
                }

                SetLastScanCompletionTime(DateTime.Now);
                SetRecommendedNextStep("Let's discuss the code.");
            }

            AddOutputText($"{completionMessage}{Environment.NewLine}");
            buttonStart.Enabled = true;
            buttonStop.Enabled = false;
        }

        #endregion

        #region Functions to update the UI from the background worker thread

        public void AddOutputText(string line)
        {
            if (textBoxOutput.InvokeRequired)
            {
                textBoxOutput.Invoke(new Action<string>(AddOutputText), line);
                return;
            }

            textBoxOutput.AppendText(line);
        }

        public void SetLastScanCompletionTime(DateTime completionTime)
        {
            if (labelLastScanCompletionTime.InvokeRequired)
            {
                labelLastScanCompletionTime.Invoke(new Action<DateTime>(SetLastScanCompletionTime), completionTime);
                return;
            }

            labelLastScanCompletionTime.Text = completionTime.ToString();
        }

        public void SetProcessedFileCount(int processedFileCount)
        {
            if (labelProcessedFileCount.InvokeRequired)
            {
                labelProcessedFileCount.Invoke(new Action<int>(SetProcessedFileCount), processedFileCount);
                return;
            }

            labelProcessedFileCount.Text = processedFileCount.ToString();
        }

        public void SetProblematicFileCount(int problematicFileCount)
        {
            if (labelProblematicFileCount.InvokeRequired)
            {
                labelProblematicFileCount.Invoke(new Action<int>(SetProblematicFileCount), problematicFileCount);
                return;
            }

            labelProblematicFileCount.Text = problematicFileCount.ToString();
        }

        public void SetRecommendedNextStep(string nextStep)
        {
            if (labelNextStep.InvokeRequired)
            {
                labelNextStep.Invoke(new Action<string>(SetRecommendedNextStep), nextStep);
            }

            labelNextStep.Text = nextStep;
        }

        #endregion

        #region Work to be performed by the background worker

        public void ScanDirectory(string directoryPath, ref DoWorkEventArgs eventArgs)
        {
            try
            {
                foreach (var directory in Directory.GetDirectories(directoryPath))
                {
                    foreach (var file in Directory.GetFiles(directory))
                    {
                        ScanFile(file, ref eventArgs);
                    }

                    if (backgroundWorker.CancellationPending)
                    {
                        eventArgs.Cancel = true;
                        return;
                    }

                    ScanDirectory(directory, ref eventArgs);
                }
            }
            catch (Exception ex)
            {
                AddOutputText($"# caught an exception: {ex.Message}{Environment.NewLine}");
            }
        }

        public void ScanFile(string filePath, ref DoWorkEventArgs eventArgs)
        {
            try
            {
                if (backgroundWorker.CancellationPending)
                {
                    eventArgs.Cancel = true;
                    return;
                }

                ++_processedFileCount;
                SetProcessedFileCount(_processedFileCount);

                if (_processedFileCount % 13 == 0)
                {
                    ++_problematicFileCount;
                    SetProblematicFileCount(_problematicFileCount);
                    AddOutputText($"### problematic file: {filePath}{Environment.NewLine}");
                }
                else
                {
                    AddOutputText($"- {filePath}{Environment.NewLine}");
                }
            }
            catch (Exception ex)
            {
                AddOutputText($"# caught an exception: {ex.Message}{Environment.NewLine}");
            }
        }

        #endregion
    }
}
